name: Build Native AMD64 Image

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: hub.marschall.systems
  IMAGE_NAME: observability/janus-native

jobs:
  build-native-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm-community'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build Native Image for Linux AMD64
      run: |
        echo "🔨 Building native image with optimized settings..."
        export MAVEN_OPTS="-Xmx6g"
        ./mvnw clean package -Pnative -DskipTests \
          -Dspring.aot.jvmArguments="-Xmx4g -XX:MaxMetaspaceSize=1g"
        
        echo "📊 Native image size:"
        ls -lh target/janus-native-test
    
    - name: Test Native Image
      run: |
        echo "🧪 Testing native image..."
        ./target/janus-native-test &
        APP_PID=$!
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/actuator/health || exit 1
        echo "✅ Actuator health check passed"
        
        # Test application endpoints
        curl -f http://localhost:8080/api/health || exit 1
        echo "✅ API health endpoint working"
        
        curl -f http://localhost:8080/api/info || exit 1
        echo "✅ API info endpoint working"
        
        kill $APP_PID
    
    - name: Log in to Private Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=native-amd64
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.k8s
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
    
    - name: Image summary
      run: |
        echo "## 🎉 Native AMD64 Image Built Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "- **Binary size**: $(ls -lh target/janus-native-test | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: linux/amd64" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Pull the image:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY 