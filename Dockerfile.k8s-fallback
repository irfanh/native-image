# Kubernetes-optimized Dockerfile for native image (with fallback)
FROM ubuntu:22.04

# Install curl for health checks and create non-root user
RUN apt-get update && apt-get install -y curl && \
    rm -rf /var/lib/apt/lists/* && \
    groupadd -r app && useradd -r -g app app

# Copy the entire project context (safer approach)
COPY . /tmp/build/

# Find and copy the native executable
RUN echo "Contents of /tmp/build:" && ls -la /tmp/build/ && \
    echo "Contents of /tmp/build/target:" && ls -la /tmp/build/target/ 2>/dev/null || echo "No target directory" && \
    NATIVE_BINARY=$(find /tmp/build -name "*janus*" -type f -executable | head -1) && \
    if [ -z "$NATIVE_BINARY" ]; then \
        echo "No native binary found with janus in name! Looking for any executable:" && \
        NATIVE_BINARY=$(find /tmp/build -type f -executable -not -name "*.sh" -not -path "*/.*" | grep -v ".jar" | head -1) && \
        if [ -z "$NATIVE_BINARY" ]; then \
            echo "Still no binary found! All files:" && \
            find /tmp/build -type f | head -20 && \
            echo "Creating dummy binary for debugging..." && \
            echo '#!/bin/bash' > /app/janus-native && \
            echo 'echo "No native binary was found during build!"' >> /app/janus-native && \
            echo 'exit 1' >> /app/janus-native; \
        else \
            echo "Found executable: $NATIVE_BINARY" && \
            cp "$NATIVE_BINARY" /app/janus-native; \
        fi; \
    else \
        echo "Found native binary: $NATIVE_BINARY" && \
        cp "$NATIVE_BINARY" /app/janus-native; \
    fi && \
    chmod +x /app/janus-native && \
    chown app:app /app/janus-native && \
    rm -rf /tmp/build

# Set working directory
WORKDIR /app

# Switch to non-root user
USER app

# Expose port
EXPOSE 8080

# Health check endpoint
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/actuator/health || exit 1

# Run the native image
ENTRYPOINT ["./janus-native"] 